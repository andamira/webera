#!/usr/bin/env bash
#
# tests helper


#-------------------------------------------------------------------------------
# ::main
#
#   Main entrance to the script.
#
helper::main() {

	# Initializations
	helper::init-common

	# Parse the arguments if the script has not been sourced
	[[ "$0" == "${BASH_SOURCE[0]}" ]] && helper::parse-arguments "$@"

} # ::main


#-------------------------------------------------------------------------------
# ::init-common
#
#   Common initializations.
#
# shellcheck disable=SC1090
helper::init-common() {

	export WEBERA_DIR_TESTS
	WEBERA_DIR_TESTS="$( cd -- "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

	export WEBERA_DIR="$WEBERA_DIR_TESTS/.."

	if [[ ! -s "$WEBERA_DIR_TESTS/aserta" ]]; then
		#curl -sOL git.io/aserta.stable -o "$WEBERA_DIR_TESTS/aserta"
		curl -sOL git.io/aserta -o "$WEBERA_DIR_TESTS/aserta"

		local ret="$?"
		if [[ $ret -ne 0 ]]; then
			printf "ERROR: Couldn't download 'aserta' (error %s).\n" "$ret"
			exit 1
		fi
	fi
	source "$WEBERA_DIR_TESTS/aserta" -v
	source "$WEBERA_DIR/webera"

	helper::check-compatibility


	export WEBERA_TEMP_PATTERN='webera-test-XXXXXXXXX'

	if [[ ! -d $WEBERA_DIR_WORKDIR ]]; then
		# if possible, use a previously created workdir
		# if not, create a new one and export it again
		export WEBERA_DIR_WORKDIR
		WEBERA_DIR_WORKDIR="$($__MKTEMP -d "$Mktemp_args" "$WEBERA_TEMP_PATTERN")"
	fi
	if [[ -z "$WEBERA_TEST_TOTAL_NUM" ]]; then
		export WEBERA_TEST_TOTAL_NUM
		WEBERA_TEST_TOTAL_NUM="$($__MKTEMP "$Mktemp_args" "$WEBERA_TEMP_PATTERN")"
		printf '0' > "$WEBERA_TEST_TOTAL_NUM"
	fi
	if [[ -z "$WEBERA_TEST_TOTAL_TIME" ]]; then
		export WEBERA_TEST_TOTAL_TIME
		WEBERA_TEST_TOTAL_TIME="$($__MKTEMP "$Mktemp_args" "$WEBERA_TEMP_PATTERN")"
		printf '0' > "$WEBERA_TEST_TOTAL_TIME"
	fi
	if [[ -z "$WEBERA_TEST_TOTAL_ERROR_NUM" ]]; then
		export WEBERA_TEST_TOTAL_ERROR_NUM
		WEBERA_TEST_TOTAL_ERROR_NUM="$($__MKTEMP "$Mktemp_args" "$WEBERA_TEMP_PATTERN")"
		printf '0' > "$WEBERA_TEST_TOTAL_ERROR_NUM"
	fi

	# set up exit traps
	trap helper::cleanup-exit EXIT
	trap helper::cleanup-signal SIGHUP SIGINT SIGTERM

} # ::init-common


#-------------------------------------------------------------------------------
# ::display-usage
#
#   Displays usage info and exits.
#
helper::display-usage() {

	cat -- <<- ENDUSAGE
Usage: ./helper [option]

Runs all the tests for webera.
This file also has to be imported by each test file.

  -a, --run-all             run all the tests.
  -r, --render <TEMPLATE>   render TEMPLATE to stdin
  -h, --help                display this help and exit.
	ENDUSAGE
	exit 0

	#TODO: -i, --install=<DEP>        download and install a supported dependency:

} # ::display-usage


#-------------------------------------------------------------------------------
# ::parse-arguments
#
#   Parses all the arguments received by the script.
#
# > $@ : all the arguments passed to the script
# x  1 : when the argument is unknown
#
helper::parse-arguments() {

	[[ -z "$@" ]] && helper::display-usage

	local OPTIND option

	while getopts ':ahi:r:-:' option; do

		case "$option" in

			# long options
			-)
				case "$OPTARG" in

					run-all) helper::run-all-tests ;;
					help) helper::display-usage ;;

					install=*)
						helper::install-dependency "${OPTARG#*=}"
						;;

					render=*)
						helper::render-template "${OPTARG#*=}"
						;;
				esac ;;

			# short options
			a) helper::run-all-tests ;;
			i) helper::install-dependency "$OPTARG" ;;

			r) helper::render-template "$OPTARG" ;;

			h) helper::display-usage ;;
			*)
				printf 'Error: "%s" is not a valid argument' "$option" >&2
				exit 1
		esac
	done

} # ::parse-arguments


#-------------------------------------------------------------------------------
# ::run-all-tests
#
#   Runs all the tests.
#
helper::run-all-tests() {

	# Manual ordered list of test files
	local test_file_list=()

	test_file_list+=('test-helper')
	test_file_list+=('test-arguments')
	test_file_list+=('test-config')
	test_file_list+=('test-log')
	test_file_list+=('test-templates')
	#test_file_list+=('test-resources')

	printf '%s\n' "Running tests from ${#test_file_list[@]} test files. . ."

	for test_file in "${test_file_list[@]}"; do
		bash "$WEBERA_DIR_TESTS/$test_file" RUN_ALL_TESTS
	done

	test_final_summary

	[[ "$TESTS_FAILED" -eq 0 ]]

} # ::run-all-tests


#-------------------------------------------------------------------------------
# ::cleanup-exit
#
#   Gets called on test error.
#
helper::cleanup-exit() {

	if [[ "${FUNCNAME[1]}" == "helper::display-usage" ]]; then
		test_final_cleanup
	else
		test_teardown
	fi

} # ::cleanup-exit


#-------------------------------------------------------------------------------
# ::cleanup-signal
#
#   Gets called on abrupt exit.
#
# x 125
#
helper::cleanup-signal() { test_final_cleanup; exit 125; }


#-------------------------------------------------------------------------------
# ::install-dependency
#
#   Downloads and installs a supported dependency.
#
helper::install-dependency() {
	declare dependency="$1"

	printf 'Installing dependency: %s . . .\n' "$dependency"

	case $dependency in
		*) printf "Error: Can't recognize dependency '%s'." "$dependency" >&2
			exit 1 ;;
	esac

} # ::install-dependency


#-------------------------------------------------------------------------------
# ::check-compatibility
#
#   ...
#
# shellcheck disable=SC2155
helper::check-compatibility() {

	# prefer the GNU version of the Unix commands used, specially in Mac OS X
	# use webera::find-gnu-cmd function from webera
	export __SED="$(webera::find-gnu-cmd sed)"
	export __AWK="$(webera::find-gnu-cmd awk)"
	export __GREP="$(webera::find-gnu-cmd grep)"
	export __MKTEMP="$(webera::find-gnu-cmd mktemp)"

	# fix mktemp compatibility [INC04]
	if [[ "$($__MKTEMP -qu --tmpdir TXXX >/dev/null 2>&1; printf '%s' "$?")" -eq 0 ]]; then
		Mktemp_args="--tmpdir" # new syntax
	else
		Mktemp_args="-t" # obsolete syntax
	fi

} # ::check-compatibility


#-------------------------------------------------------------------------------
#
test_separator() {
	printf '%s' '-----------------------------'
}


#-------------------------------------------------------------------------------
#
test_h1() {
	if [[ "$DEBUG" -gt 0 ]]; then
		printf '\n\n[Testing %s]\n' "$@"
	fi
}


#-------------------------------------------------------------------------------
#
test_h2() {
	if [[ "$DEBUG" -gt 0 ]]; then
		printf '\n  + %s:' "$@"
	fi
}


#-------------------------------------------------------------------------------
#
test_h3() {
	if [[ "$DEBUG" -gt 0 ]]; then
		printf '\n    - %s:' "$@"
	fi
}


#-------------------------------------------------------------------------------
# test_setup
#
#   Enters the working directory.
#
test_setup() {

	if [[ -d "$WEBERA_DIR_WORKDIR" ]]; then
		pushd "$WEBERA_DIR_WORKDIR" >/dev/null 2>&1
	else
		printf 'Warning: %s %s.' \
			"couldn't find working directory" \
			"'$WEBERA_DIR_WORKDIR'" >&2

		export WEBERA_DIR_WORKDIR
		WEBERA_DIR_WORKDIR="$($__MKTEMP -d "$Mktemp_args" "$WEBERA_TEMP_PATTERN")"

		printf 'Warning: %s %s.' \
			"creating a new working directory at" \
			"'$WEBERA_DIR_WORKDIR'" >&2

		pushd "$WEBERA_DIR_WORKDIR"
	fi

} # test_setup


#-------------------------------------------------------------------------------
# test_teardown
#
#   Returns from and deletes the working directory.
#
test_teardown() {

	if [[ "$(pwd)" == "$WEBERA_DIR_WORKDIR" ]]; then
		popd >/dev/null 2>&1
	fi

	if [[ -d "$WEBERA_DIR_WORKDIR" ]]; then
		test_clean
		rmdir -- "$WEBERA_DIR_WORKDIR"
	fi

} # test_teardown


#-------------------------------------------------------------------------------
# test_clean
#
#   Cleans the working directory.
#
test_clean() {

	if [[ -d "$WEBERA_DIR_WORKDIR" ]]; then
		pushd "$WEBERA_DIR_WORKDIR" >/dev/null 2>&1
		rm -rf -- .[^.] .??* ./*
		popd >/dev/null 2>&1
	else
		printf '%s\n' \
			"Warning: couldn't find working directory '$WEBERA_DIR_WORKDIR'" >&2
	fi

} # test_clean


#-------------------------------------------------------------------------------
# test_summary
#
#   Prints the report and saves the counts for the final summary.
#
test_summary() {

	local testStr="$1"

	local test_report
	local test_num
	local prev_total_num
	local new_total_num

	local error_report
	local what_failed
	local test_err_num
	local prev_total_err_num
	local new_total_err_num

	local test_time
	local prev_total_time
	local new_total_time

	local errPattern='[0-9]\+ of [0-9]\+ .* tests failed.*$'

	test_report="$(assert_end \'"$testStr"\' | tr -d '\n' )"

	printf '\n  %s' "$(test_separator)"

	# No tests failed
	if [[ "$(printf '%s' "$test_report" | cut -d' ' -f1)" == "all" ]]; then
		printf '\n  %s\n' "$test_report"

		# get the number of passed tests
		test_num="$(printf '%s' "$test_report" \
			| $__GREP -o '^all [0-9]\+' | cut -d' ' -f2 )"

	# Some tests failed
	else
		what_failed="$(printf "%s" "$test_report" | $__SED "s/\($errPattern\)//" )"
		error_report="$(printf "%s" "$test_report" | $__GREP -o "$errPattern" )"

		printf '%s\n' "$what_failed" | tr '\t' '\n' \
			| $__SED 's/\(test\ #[0-9]\)/\n> &/g' | $__SED 's/^/  /'
		printf '  %s\n' "$(test_separator)"
		printf '  %s\n' "$error_report"

		# Update the number of failed tests
		if [[ -f "$WEBERA_TEST_TOTAL_ERROR_NUM" ]]; then
			test_err_num="$(printf '%s' "$error_report" | cut -d' ' -f1 )"
			prev_total_err_num="$(cat -- "$WEBERA_TEST_TOTAL_ERROR_NUM")"
			new_total_err_num="$($__AWK \
				"BEGIN {print $test_err_num+$prev_total_err_num; exit}")"

			printf '%s' "$new_total_err_num" > "$WEBERA_TEST_TOTAL_ERROR_NUM"
			TESTS_FAILED="$new_total_err_num"
		fi

		# get the number of passed tests
		test_num="$(printf '%s' "$error_report" | cut -d' ' -f3 )"
	fi

	# Update the number of passed tests
	if [[ -f "$WEBERA_TEST_TOTAL_NUM" ]]; then
		prev_total_num="$(cat -- "$WEBERA_TEST_TOTAL_NUM")"
		new_total_num="$($__AWK \
			"BEGIN {print $test_num+$prev_total_num; exit}")"

		printf '%s' "$new_total_num" > "$WEBERA_TEST_TOTAL_NUM"
	fi

	# Total time spent
	if [[ -z "$INVARIANT"  && -f "$WEBERA_TEST_TOTAL_TIME" ]]; then
		test_time="$(printf '%s' "$test_report" | \
			$__GREP -o '[0-9]\+.[0-9]\+s.' | cut -d's' -f1 )"
		prev_total_time="$(cat -- "$WEBERA_TEST_TOTAL_TIME")"
		new_total_time="$($__AWK "BEGIN {print $test_time+$prev_total_time; exit}")"
		printf '%s' "$new_total_time" > "$WEBERA_TEST_TOTAL_TIME"
	fi

	[[ "$TESTS_FAILED" -eq 0 ]]

} # test_summary


#-------------------------------------------------------------------------------
# test_final_summary
#
#   ...
#
test_final_summary() {

	local -i testTotal
	local -i testFailed

	testTotal="$(cat -- "$WEBERA_TEST_TOTAL_NUM")"
	testFailed="$(cat -- "$WEBERA_TEST_TOTAL_ERROR_NUM")"
	local -i testPassed="$((testTotal-testFailed))"

	printf '\n\n%s\n%s\n' "SUMMARY:" "$(test_separator)"
	printf '%s %16u\n' "Tests done:" "$testTotal"

	printf '%s %16u\n' "Tests pass:" "$testPassed"
	printf '%s %16u\n' "Tests fail:" "$testFailed"

	if [[ -z "$INVARIANT" ]]; then
		LC_NUMERIC=C LC_COLLATE=C
		printf '%s %16.2fs\n' "Time spent:" "$(cat -- "$WEBERA_TEST_TOTAL_TIME")"
	fi

	printf '%s\n' "$(test_separator)"

	test_final_cleanup

} # test_final_summary


test_final_cleanup() {

	[[ -f "$WEBERA_TEST_TOTAL_NUM" ]] && rm -f -- "$WEBERA_TEST_TOTAL_NUM"
	[[ -f "$WEBERA_TEST_TOTAL_TIME" ]] && rm -f -- "$TOTAL_TEST_TIME"

	if [[ -f "$WEBERA_TEST_TOTAL_ERROR_NUM" ]]; then
		TESTS_FAILED="$(cat -- "$WEBERA_TEST_TOTAL_ERROR_NUM")"
		rm -f -- "$WEBERA_TEST_TOTAL_ERROR_NUM"
	fi

	test_teardown

} # test_final_cleanup


#-------------------------------------------------------------------------------
# webera
#
#   webera binary wrapper.
#
webera() { "$WEBERA_DIR/webera" "$@" 2>/dev/null; }


#-------------------------------------------------------------------------------
# get-webera-option
#
#   Parse a list of options and return the corresponding value. Correct format:
#
#     [$option_type]::$option_name=$option_value
#
get-webera-option() {

	local webera_options="$1"
	local option_type="$2"
	local option_name="$3"

	shopt -s extglob
	local option_typesAllowed='@(vdef|file|args|strn)'

	case "$option_type" in
		$option_typesAllowed) ;;
		*) printf '%s' "ERROR: Unknown var type '$option_type'." 1>&2 ;;
	esac
	shopt -u extglob

	printf '%s' "$webera_options" \
		| $__GREP "^\[$option_type\]:.*:$option_name=" \
		| cut -d':' -f3 \
		| cut -d'=' -f2

} # get-webera-option


#-------------------------------------------------------------------------------
# ::render-template
#
#   Renders the requested template file to stdin.
#
# > $1 : the template file to render
#
# shellcheck disable=SC2034
helper::render-template() {

	local template_file="$1" #target_file="$2"

	local __Ws="[[:space:]]"
	local Opt_nesting_max=8
	local Opt_dir_templates="."

	webera::render-template "$template_file"
	#printf '%s\n' "$template_rendered" > "$target_file"

	test_final_cleanup

} # ::render-template


helper::main "$@"
