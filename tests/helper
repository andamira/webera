#!/usr/bin/env bash

helper_main() {

	# Initializations
	helper_init_common

	[[ "$NOT_SOURCED" ]] && helper_arguments "$@"

} # helper_main()

helper_init_common() {

	__check_compatibility

	DIR_TESTS="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
	DIR_WEBERA="$DIR_TESTS/.."

	TEMPLATE_TEMP_NAME='webera-test-XXXXXXXXX'

	# Exports
	if [[ ! -d $DIR_WORKDIR ]]; then
		# if possible, use a previously created workdir
		# if not, create a new one and export it again
		export DIR_WORKDIR="$(mktemp -d $MKTEMP_ARGS $TEMPLATE_TEMP_NAME)"
	fi
	if [[ -z "$TOTAL_TEST_NUM" ]]; then
		export TOTAL_TEST_NUM=$(mktemp $MKTEMP_ARGS $TEMPLATE_TEMP_NAME);
		echo "0" > "$TOTAL_TEST_NUM"
	fi
	if [[ -z "$TOTAL_TEST_TIME" ]]; then
		export TOTAL_TEST_TIME=$(mktemp $MKTEMP_ARGS $TEMPLATE_TEMP_NAME);
		echo "0" > "$TOTAL_TEST_TIME"
	fi
	if [[ -z "$TOTAL_TEST_ERROR_NUM" ]]; then
		export TOTAL_TEST_ERROR_NUM=$(mktemp $MKTEMP_ARGS $TEMPLATE_TEMP_NAME);
		echo "0" > "$TOTAL_TEST_ERROR_NUM"
	fi

	# Imports
	source "$DIR_TESTS/extern/assert.sh" -v
	source "$DIR_WEBERA/webera"

	# set up exit traps
	trap helper_cleanup_signal SIGHUP SIGINT SIGTERM
	trap helper_cleanup_exit EXIT

} # helper_init_common()

helper_usage() {
	cat <<- ENDUSAGE

	Runs all the examples.
	Also, it must be imported by each example.

	Usage: ./helper -r

	  -r              run every test
	  -h              displays this help
	ENDUSAGE
	exit

} # helper_usage()

helper_arguments() {

	[[ -z "$@" ]] && helper_usage

	local OPTIND OPTION
	while getopts 'rh' OPTION; do
		case "$OPTION" in
			r) helper_run_all_tests; ;;
			h) helper_usage ;;
			*)
				printf 'Error: "%s" is not a valid argument' "$OPTION" >&2
				exit 1
		esac
	done

} # helper_parseArguments()

helper_run_all_tests() {

	# Manual ordered list of test files
	local testFiles=()

	testFiles+=('test-helper')
	testFiles+=('test-arguments')
	testFiles+=('test-config')
	#testFiles+=('test-log')
	#testFiles+=('test-templates')
	#testFiles+=('test-resources')

	printf '%s\n' "Running tests from ${#testFiles[@]} test files. . ."

	for T in "${testFiles[@]}"; do
		"$DIR_TESTS/$T"
	done

	test_final_summary

	[[ "$TESTS_FAILED" -eq 0 ]]

} # helper_run_all_tests()


# PRESENTATION
# ############

test_separator() {
	printf '%s' '-----------------------------'
}

test_h1() {
	if [[ "$DEBUG" -gt 0 ]]; then
		printf '\n\n[Testing %s]\n' "$@"
	fi
}

test_h2() {
	if [[ "$DEBUG" -gt 0 ]]; then
		printf '\n  test: %s ' "$@"
	fi
}

test_h3() {
	if [[ "$DEBUG" -gt 0 ]]; then
		printf '\n    test: %s ' "$@"
	fi
}


# SETUP
# #####

# enters the working directory
test_setup() {
	if [[ -d "$DIR_WORKDIR" ]]; then
		pushd "$DIR_WORKDIR" >/dev/null 2>&1
	else
		printf 'Warning: %s %s.' \
			"couldn't find working directory" \
			"'$DIR_WORKDIR'" >&2

		export DIR_WORKDIR="$(mktemp -d $MKTEMP_ARGS $TEMPLATE_TEMP_NAME)"

		printf 'Warning: %s %s.' \
			"creating a new working directory at" \
			"'$DIR_WORKDIR'" >&2

		pushd "$DIR_WORKDIR"
	fi

} # test_setup()

# returns from and delets the working directory
test_teardown() {
	if [[ "$(pwd)" == "$DIR_WORKDIR" ]]; then
		popd >/dev/null 2>&1
	fi

	if [[ -d "$DIR_WORKDIR" ]]; then
		test_clean
	   	rmdir "$DIR_WORKDIR"
	fi

} # test_teardown()

# cleans the working directory
test_clean() {
	if [[ -d "$DIR_WORKDIR" ]]; then
		pushd "$DIR_WORKDIR" >/dev/null 2>&1
		rm -rf .[^.] .??* ./*
		popd >/dev/null 2>&1
	else
		printf '%s\n' \
			"Warning: couldn't find working directory '$DIR_WORKDIR'" >&2
	fi

} # test_clean()


# REPORT
# ######

# prints the report and saves the counts for the final summary
test_summary() {
	local testStr="$1"
	local testReport="$(assert_end \'"$testStr"\' | tr -d '\n' )"

	printf '\n  %s' "$(test_separator)"

	# No tests failed
	if [[ "$(echo "$testReport" | cut -d' ' -f1)" == "all" ]]; then
		printf '\n  %s\n' "$testReport"

		# get the number of passed tests
		local testNum="$(echo "$testReport" \
			| grep -o '^all [0-9]\+' | cut -d' ' -f2 )"

	# Some tests failed
	else
		local pattern='[0-9]\+ of [0-9]\+ .* tests failed.*$'
		local whatFailed="$(printf "%s" "$testReport" | sed "s/\($pattern\)//" )"
		local errorReport="$(printf "%s" "$testReport" | grep -o "$pattern" )"

		printf '%s\n' "$whatFailed" | tr '\t' '\n' \
			| sed 's/\(test\ #[0-9]\)/\n> &/g' | sed 's/^/  /'
		printf '  %s\n' "$(test_separator)"
		printf '  %s\n' "$errorReport"

		# Update the number of failed tests
		if [[ -f "$TOTAL_TEST_ERROR_NUM" ]]; then
			local testErrNum="$(echo "$errorReport" | cut -d' ' -f1 )"
			local previousTotalErrNum="$(cat "$TOTAL_TEST_ERROR_NUM")"
			local newTotalErrNum="$(awk \
				"BEGIN {print $testErrNum+$previousTotalErrNum; exit}")"

			echo "$newTotalErrNum" > "$TOTAL_TEST_ERROR_NUM"
			TESTS_FAILED="$newTotalErrNum"
		fi

		# get the number of passed tests
		local testNum="$(echo "$errorReport" | cut -d' ' -f3 )"
	fi

	# Update the number of passed tests
	if [[ -f "$TOTAL_TEST_NUM" ]]; then
		local previousTotalNum="$(cat "$TOTAL_TEST_NUM")"
		local newTotalNum="$(awk \
			"BEGIN {print $testNum+$previousTotalNum; exit}")"

		echo "$newTotalNum" > "$TOTAL_TEST_NUM"
	fi

	# Total time spent
	if [[ -z "$INVARIANT"  && -f "$TOTAL_TEST_TIME" ]]; then
		local testTime="$(echo "$testReport" | grep -o '[0-9]\+.[0-9]\+s.' | cut -d's' -f1 )"
		local previousTotalTime="$(cat "$TOTAL_TEST_TIME")"
		local newTotalTime="$(awk "BEGIN {print $testTime+$previousTotalTime; exit}")"
		echo "$newTotalTime" > "$TOTAL_TEST_TIME"
	fi

	[[ "$TESTS_FAILED" -eq 0 ]]

} # test_summary()

test_final_summary() {
	local -i testTotal="$(cat "$TOTAL_TEST_NUM")"
	local -i testFailed="$(cat "$TOTAL_TEST_ERROR_NUM")"
	local -i testPassed="$((testTotal-testFailed))"

	printf '\n\n%s\n%s\n' "SUMMARY:" "$(test_separator)"
	printf '%s %16u\n' "Tests done:" "$testTotal"

	printf '%s %16u\n' "Tests pass:" "$testPassed"
	printf '%s %16u\n' "Tests fail:" "$testFailed"

	if [[ -z "$INVARIANT" ]]; then
		LC_NUMERIC=C LC_COLLATE=C
		printf '%s %16.2fs\n' "Time spent:" "$(cat "$TOTAL_TEST_TIME")"
	fi

	printf '%s\n' "$(test_separator)"

	test_final_cleanup

} # test_final_summary()

test_final_cleanup() {
	[[ -f "$TOTAL_TEST_NUM" ]] && rm -f "$TOTAL_TEST_NUM"
	[[ -f "$TOTAL_TEST_TIME" ]] && rm -f "$TOTAL_TEST_TIME"

	if [[ -f "$TOTAL_TEST_ERROR_NUM" ]]; then
		TESTS_FAILED="$(cat "$TOTAL_TEST_ERROR_NUM")"
		rm -f "$TOTAL_TEST_ERROR_NUM"
	fi

	test_teardown
}

# This function gets called on test error
helper_cleanup_exit() {
	test_teardown
}

# This function gets called on abrupt exit
helper_cleanup_signal() {
	test_final_cleanup
}


# WEBERA
# ######

# Binary wrapper
webera() { "$DIR_WEBERA/webera" "$@" 2>/dev/null; }

# Parse a list of variables in debug info format
# and return the corresponding value.
#
#  [$varType]::$varName=$varValue
#
weberaVarValue() {
	local webera_vars="$1"
	local varType="$2"
	local varName="$3"

	shopt -s extglob
	local varTypesAllowed='@(vdef|file|args)'

	case "$varType" in
		$varTypesAllowed) ;;
		*) printf '%s' "ERROR: Unknown var type '$varType'." 1>&2 ;;
	esac
	shopt -u extglob

	printf '%s' "$webera_vars" \
		| grep "^\[$varType\]:.*:$varName=" \
		| cut -d':' -f3 \
		| cut -d'=' -f2

} # weberaVarValue()

__check_compatibility() {

	# mktemp
	if [[ "$(mktemp -qu --tmpdir TXXX >/dev/null 2>&1; echo $?)" -eq 0 ]]; then
		MKTEMP_ARGS="--tmpdir" # new syntax
	else
		MKTEMP_ARGS="-t" # obsolete syntax
	fi

} # __check_compatibility()


[[ "$0" == "$BASH_SOURCE" ]] && NOT_SOURCED=true

helper_main "$@"
