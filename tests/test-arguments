#!/usr/bin/env bash
#
# Tests for the script arguments
#


#-------------------------------------------------------------------------------
# ::init
#
test::init() {

	# Change to the directory where this script is located
	if [[ "${BASH_SOURCE%/*}" != "${BASH_SOURCE[0]}" ]]; then
		cd -- "${BASH_SOURCE%/*}" || exit 1
	fi

	# shellcheck disable=SC1091
	source ./helper

	# Run tests
	test_setup
	test::suite
	test_teardown

	test_summary 'arguments'

} #::init()


#-------------------------------------------------------------------------------
# ::suite
#
test::suite() {

	declare default newval newval2

	test_h1 "Script Arguments"
	# ========================



	test_h2 "Usage"
	# ~~~~~~~~~~~~~~~~~~~~~~~~


	# T: Run without arguments
	assert_raises "webera" "1"

	# T: -h
	newval="$(webera -h | head -14 )"
	assert_str_contains "$newval" "Usage: webera -[trawn]"

	# T: --help
	newval2="$(webera --help | head -14 )"
	assert_str_equals "$newval" "$newval2"



	test_h2 "Debug"
	# ~~~~~~~~~~~~~~~~~~~~~~~~


	# T:
	assert_success  "webera -_"

	local -r defaults="$(webera -_)"

	# T: Check expected format, and the minimum number of arguments
	newval=$(echo "$defaults" | grep -c '^\[[a-z]\+\]:.\+=')
	assert_success "[[ $newval -ge 25 ]]" # give a safe margin



	test_h2 "Operational Flags"
	# ~~~~~~~~~~~~~~~~~~~~~~~~


	#T: -t
	newval=$(get-webera-var "$(webera -_t)" \
		'args' '_DO_PROCESS_TEMPLATES')
	assert_str_equals "$newval" "true"

	#T: --process-templates
	newval=$(get-webera-var "$(webera -_ --process-templates)" \
		'args' '_DO_PROCESS_TEMPLATES')
	assert_str_equals "$newval" "true"

	#T: -r
	newval=$(get-webera-var "$(webera -_r)" \
		'args' '_DO_PROCESS_RESOURCES')
	assert_str_equals "$newval" "true"

	# T: --process-resources
	newval=$(get-webera-var "$(webera -_ --process-resources)" \
		'args' '_DO_PROCESS_RESOURCES')
	assert_str_equals "$newval" "true"


	# T: -w
	newval=$(get-webera-var "$(webera -_w)" \
		'args' '_DO_PREVIEW_IN_BROWSER')
	assert_str_equals "$newval" "true"

	# T: --preview
	newval=$(get-webera-var "$(webera -_ --preview)" \
		'args' '_DO_PREVIEW_IN_BROWSER')
	assert_str_equals "$newval" "true"


	# T: -n
	newval=$(get-webera-var "$(webera -_n)" \
		'args' '_DO_GENERATE_CONFIG_FILE')
	assert_str_equals "$newval" "true"

	# T: --new-config
	newval=$(get-webera-var "$(webera -_ --new-config)" \
		'args' '_DO_GENERATE_CONFIG_FILE')
	assert_str_equals "$newval" "true"



	test_h2 "Config as string"
	# ~~~~~~~~~~~~~~~~~~~~~~~~



	# T: configuration string
	default=$(get-webera-var "$defaults" 'vdef' '_CONFIG_STRING')
	assert_str_equals "$default" ''

	# T: -C
	newval=$(get-webera-var "$(webera -_C "config:DIR_TEMPLATES:tem5")" \
		'strn' 'DIR_TEMPLATES')
	assert_str_equals "$newval" "tem5"

	# T: --config
	newval=$(get-webera-var "$(webera -_ --config="config:DIR_RESOURCES:res7")" \
		'strn' 'DIR_RESOURCES')
	assert_str_equals "$newval" "res7"



	test_h2 "File Paths"
	# ~~~~~~~~~~~~~~~~~~~~~~~~



	# T: default configuration file
	default=$(get-webera-var "$defaults" 'vdef' '_CONFIG_FILE')
	assert_str_equals "$default" ".weberarc"

	# T: -F
	newval=$(get-webera-var "$(webera -_F test_weberarc)" \
		'args' '_CONFIG_FILE')
	assert_str_equals "$newval" "test_weberarc"

	# T: --file-config
	newval=$(get-webera-var "$(webera -_ --file-config=test_weberarc2)" \
		'args' '_CONFIG_FILE')
	assert_str_equals "$newval" "test_weberarc2"



	test_h2 "Dir Paths"
	# ~~~~~~~~~~~~~~~~~~~~~~~~



	# T: default templates directory
	default=$(get-webera-var "$defaults" 'vdef' 'DIR_TEMPLATES')
	assert_str_equals "$default" "tem"

	# T: -T
	newval=$(get-webera-var "$(webera -_T test_tem)" \
		'args' 'DIR_TEMPLATES')
	assert_str_equals "$newval" "test_tem"

	# T: --dir-templates
	newval=$(get-webera-var "$(webera -_ --dir-templates=test_tem2)" \
		'args' 'DIR_TEMPLATES')
	assert_str_equals "$newval" "test_tem2"


	# T: default resources directory
	default=$(get-webera-var "$defaults" 'vdef' 'DIR_RESOURCES')
	assert_str_equals "$default" "res"

	# T: -R
	newval=$(get-webera-var "$(webera -_R test_res)" \
		'args' 'DIR_RESOURCES')
	assert_str_equals "$newval" "test_res"

	# T: --dir-resources
	newval=$(get-webera-var "$(webera -_ --dir-resources=test_res2)" \
		'args' 'DIR_RESOURCES')
	assert_str_equals "$newval" "test_res2"


	# T: default output directory
	default=$(get-webera-var "$defaults" 'vdef' 'DIR_OUTPUT')
	assert_str_equals "$default" "out"

	# T: -O
	newval=$(get-webera-var "$(webera -_O test_out)" \
		'args' 'DIR_OUTPUT')
	assert_str_equals "$newval" "test_out"

	# T: --dir-output
	newval=$(get-webera-var "$(webera -_ --dir-output=test_out2)" \
		'args' 'DIR_OUTPUT')
	assert_str_equals "$newval" "test_out2"


	# T: default build directory
	default=$(get-webera-var "$defaults" 'vdef' 'DIR_BUILD')
	assert_str_equals "$default" "build"

	# T: -B
	newval=$(get-webera-var "$(webera -_B test_build)" \
		'args' 'DIR_BUILD')
	assert_str_equals "$newval" "test_build"

	# T: --dir-build
	newval=$(get-webera-var "$(webera -_ --dir-build=test_build2)" \
		'args' 'DIR_BUILD')
	assert_str_equals "$newval" "test_build2"



	test_h2 "Optionless Flags"
	# ~~~~~~~~~~~~~~~~~~~~~~~~



	# T: by default delete the output directory
	default=$(get-webera-var "$defaults" \
		'vdef' '_DO_DELETE_DIR_OUTPUT')
	assert_str_equals "$default" "true"

	# T: -d
	newval=$(get-webera-var "$(webera -_d)" \
		'args' '_DO_DELETE_DIR_OUTPUT')
	assert_str_equals "$newval" "false"

	# T: --dont-delete-output
	newval=$(get-webera-var "$(webera -_ --dont-delete-output)" \
		'args' '_DO_DELETE_DIR_OUTPUT')
	assert_str_equals "$newval" "false"


	# T: by default don't clear the log file
	default=$(get-webera-var "$defaults" \
		'vdef' '_DO_CLEAR_LOG')
	assert_str_equals "$default" "false"

	# T: -c
	newval=$(get-webera-var "$(webera -_c)" \
		'args' '_DO_CLEAR_LOG')
	assert_str_equals "$newval" "true"

	# T: --clear-log
	newval=$(get-webera-var "$(webera -_ --clear-log)" \
		'args' '_DO_CLEAR_LOG')
	assert_str_equals "$newval" "true"



	test_h2 "Log"
	# ~~~~~~~~~~~~~~~~~~~~~~~~



	# T: default log level
	default=$(get-webera-var "$defaults" 'vdef' 'LOG_LEVEL')
	assert_str_equals "$default" "0"

	# T: -L
	newval=$(get-webera-var "$(webera -_L3)" \
		'args' 'LOG_LEVEL')
	assert_str_equals "$newval" "3"

	# T: --log-level
	newval=$(get-webera-var "$(webera -_ --log-level=3)" \
		'args' 'LOG_LEVEL')
	assert_str_equals "$newval" "3"


	# T: default log file
	default=$(get-webera-var "$defaults" 'vdef' 'LOG_FILE')
	assert_str_equals "$default" "log.txt"

	# T: -G
	newval=$(get-webera-var "$(webera -_G test_logfile)" \
		'args' 'LOG_FILE')
	assert_str_equals "$newval" "test_logfile"

	# T: --log-file
	newval=$(get-webera-var "$(webera -_ --log-file=test_logfile2)" \
		'args' 'LOG_FILE')
	assert_str_equals "$newval" "test_logfile2"



	test_h2 "Website Preview"
	# ~~~~~~~~~~~~~~~~~~~~~~~~



	# T: default web browser binary
    # SEMIBUG_20161212: this one makes kcov fail
	default=$(get-webera-var "$defaults" 'vdef' 'WEB_BROWSER')
	assert_str_equals "$default" "firefox"

	# T: -W
	newval=$(get-webera-var "$(webera -_W test_browser)" \
		'args' 'WEB_BROWSER')
	assert_str_equals "$newval" "test_browser"

	# T: --browser-bin
	newval=$(get-webera-var "$(webera -_ --browser-bin=test_browser2)" \
		'args' 'WEB_BROWSER')
	assert_str_equals "$newval" "test_browser2"


	# T: default server type
	default=$(get-webera-var "$defaults" 'vdef' 'SERVER_TYPE')
	assert_str_equals "$default" "python"

	# T: -S
	newval=$(get-webera-var "$(webera -_S test_custom)" \
		'args' 'SERVER_TYPE')
	assert_str_equals "$newval" "test_custom"

	# T: --server-type
	newval=$(get-webera-var "$(webera -_ --server-type=test_custom2)" \
		'args' 'SERVER_TYPE')
	assert_str_equals "$newval" "test_custom2"


	# T: default host
	default=$(get-webera-var "$defaults" 'vdef' 'SERVER_HOST')
	assert_str_equals "$default" "localhost"

	# T: -H
	newval=$(get-webera-var "$(webera -_H test_host)" \
		'args' 'SERVER_HOST')
	assert_str_equals "$newval" "test_host"

	# T: --server-host
	newval=$(get-webera-var "$(webera -_ --server-host=test_host2)" \
		'args' 'SERVER_HOST')
	assert_str_equals "$newval" "test_host2"


	# T: default port
	default=$(get-webera-var "$defaults" 'vdef' 'SERVER_PORT')
	assert_str_equals "$default" "8192"

	# T: -P
	newval=$(get-webera-var "$(webera -_P 9000)" \
		'args' 'SERVER_PORT')
	assert_str_equals "$newval" "9000"

	# T: --server-port
	newval=$(get-webera-var "$(webera -_ --server-port=10000)" \
		'args' 'SERVER_PORT')
	assert_str_equals "$newval" "10000"



	test_h2 "Other"
	# ~~~~~~~~~~~~~~~~~~~~~~~~



	# T: using -h still parses the rest of the arguments
	newval=$(get-webera-var "$(webera -_hP 7000)" \
		'args' 'SERVER_PORT')
	assert_str_equals "$newval" "7000"


} #::suite()


[[ "$0" == "${BASH_SOURCE[0]}" ]] && test::init "$@"
