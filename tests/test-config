#!/usr/bin/env bash


# ::suite
#
#   Test the configuration.
#
test::suite() {

	local newval

	test_h1 "Configuration"
	# ========================


	test_h2 "Syntax & Behaviour"
	# ~~~~~~~~~~~~~~~~~~~~~~~~


	test_h3 "Whitespace"
	# ------------------------


	test_clean


	# T: No spaces
	printf "config:DIR_TEMPLATES:syn_nospaces" > .weberarc
	newval=$(get-webera-var "$(webera -_)" 'file' 'DIR_TEMPLATES')
	assert "echo $newval" "syn_nospaces"

	# T: Spaces
	printf "config : DIR_TEMPLATES : syn_spaces\n" > .weberarc
	newval=$(get-webera-var "$(webera -_)" 'file' 'DIR_TEMPLATES')
	assert "echo $newval" "syn_spaces"

	# T: Tabs
	printf "config\t:\tDIR_TEMPLATES\t:\tsyn_tabs\n" > .weberarc
	newval=$(get-webera-var "$(webera -_)" 'file' 'DIR_TEMPLATES')
	assert "echo $newval" "syn_tabs"

	# T: Spaces, tabs, trailing and leading whitespace
	printf "  \t config\t\t: DIR_TEMPLATES   :\tsyn_whitespace\t\n" > .weberarc
	newval=$(get-webera-var "$(webera -_)" 'file' 'DIR_TEMPLATES')
	assert "echo $newval" "syn_whitespace"

	# T: # Line splitting
	printf "config : DIR_TEMPLATES : \
		syn_linesplit\n" > .weberarc
	newval=$(get-webera-var "$(webera -_)" 'file' 'DIR_TEMPLATES')
	assert "echo $newval" "syn_linesplit"


	test_h3 "Private variables"
	# ------------------------


 	test_clean


	# Private variables shouldn't be read
	cat <<- EOF > .weberarc
	config : DIR_TEMPLATES : var_public
	config : _FILE_CONFIG : var_private_1
	config : _PRELOG : var_private_2
	config : __OTHER: var_private_3
	EOF

	# T:
	newval=$(get-webera-var "$(webera -_)" 'file' 'DIR_TEMPLATES')
	assert "echo $newval" "var_public"

	# T:
	newval=$(get-webera-var "$(webera -_)" 'file' '_FILE_CONFIG')
	assert "echo $newval"

	# T:
	newval=$(get-webera-var "$(webera -_)" 'file' '_PRELOG')
	assert "echo $newval"

	# T:
	newval=$(get-webera-var "$(webera -_)" 'file' '__OTHER')
	assert "echo $newval"


	# test_h3 "Missing parameters"
	# ------------------------


	test_h2 "Generate config file"
	# ~~~~~~~~~~~~~~~~~~~~~~~~


	test_clean


	# T: (-n) Generate with default name
	assert "webera -n"

	# T:
	assert_success "[[ -f .weberarc ]]"


	# T: (-nC) Generate with a custom name
	assert "webera -nC .test_weberarc"

	# T:
	assert_success "[[ .test_weberarc ]]"

	# T: _FILE_CONFIG shouldn't be written to config file
	assert "cat .test_weberarc"


	test_h2 "Pass as string"
	# ~~~~~~~~~~~~~~~~~~~~~~~~


	test_h2 "File contents"
	# ~~~~~~~~~~~~~~~~~~~~~~~~


	test_h3 "Paths: separate"
	# ------------------------


	test_clean


	# T: (-T) DIR_TEMPLATES
	assert "webera -n -T test_tem"
	# T: write
	assert "cat .weberarc" "config : DIR_TEMPLATES : test_tem"
	# T: read
	newval=$(get-webera-var "$(webera -_)" 'file' 'DIR_TEMPLATES')
	assert "echo $newval" "test_tem"


	test_clean


	# T: (-R) DIR_RESOURCES
	assert "webera -n -R test_res"

	# T: write
	assert "cat .weberarc" "config : DIR_RESOURCES : test_res"

	# T: read
	newval=$(get-webera-var "$(webera -_)" 'file' 'DIR_RESOURCES')
	assert "echo $newval" "test_res"


	test_clean


	# T: (-O) DIR_OUTPUT
	assert "webera -n -O test_out"

	# T: write
	assert "cat .weberarc" "config : DIR_OUTPUT : test_out"

	# T: read
	newval=$(get-webera-var "$(webera -_)" 'file' 'DIR_OUTPUT')
	assert "echo $newval" "test_out"


	test_clean


	# T: (-B) DIR_BUILD
	assert "webera -n -B test_build"

	# T: write
	assert "cat .weberarc" "config : DIR_BUILD : test_build"

	# T: read
	newval=$(get-webera-var "$(webera -_)" 'file' 'DIR_BUILD')
	assert "echo $newval" "test_build"


	test_h3 "Paths: together"
	# ------------------------


	test_clean


	# T: (-TROB) all paths together
	assert "webera -n -T t1 -R r2 -O o3 -B b4"

	# T: write 1 2 3 4
	assert "cat .weberarc | sort" "config : DIR_BUILD : b4
config : DIR_OUTPUT : o3
config : DIR_RESOURCES : r2
config : DIR_TEMPLATES : t1"

	# T: read 1
	newval=$(get-webera-var "$(webera -_)" 'file' 'DIR_TEMPLATES')
	assert "echo $newval" "t1"

	# T: read 2
	newval=$(get-webera-var "$(webera -_)" 'file' 'DIR_RESOURCES')
	assert "echo $newval" "r2"

	# T: read 3
	newval=$(get-webera-var "$(webera -_)" 'file' 'DIR_OUTPUT')
	assert "echo $newval" "o3"

	# T: read 4
	newval=$(get-webera-var "$(webera -_)" 'file' 'DIR_BUILD')
	assert "echo $newval" "b4"

} #::suite()


#-------------------------------------------------------------------------------
# ::init
#
# > $1 : if equals "RUN_ALL_TESTS" then don't do final cleanup
#
test::init() {

	# Change to the directory where this script is located
	if [[ "${BASH_SOURCE%/*}" != "${BASH_SOURCE[0]}" ]]; then
		cd -- "${BASH_SOURCE%/*}" || exit 1
	fi

	# shellcheck disable=SC1091
	source ./helper &>/dev/null

	# Run tests
	test_setup
	test::suite
	test_teardown

	test_summary 'config'

	# Only do the final cleanup when the script is run independently
	[[ $1 != RUN_ALL_TESTS ]] && test_final_cleanup

} #::init()


[[ "$0" == "${BASH_SOURCE[0]}" ]] && test::init "$@"
