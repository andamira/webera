#!/usr/bin/env bash


# ::suite
#
#   Test the templates system.
#
test::suite() {


	test_h1 "Templates"
	# ========================


	## Config

	local dir_tem_in="$Dir_tests/files/tem-in"   # input templates for render
	local dir_tem_out="$Dir_tests/files/tem-out" # render output control models
	#local render_result

	# directory names for running webera during the tests
	local dir_tem='tem' dir_out='out' #dir_build='build'


	test_h2 "webera::render-template"
	# ~~~~~~~~~~~~~~~~~~~~~~~~

	# T: simple HTML5. Exact copy expected.
	result_test="$(test::render-template "$dir_tem_in/00-simple-html5.html")"
	result_model="$(cat "$dir_tem_out/00-simple-html5.html")"
	assert_str_equals "$result_test" "$result_model"

	# T: nesting. Exact copy expected.
	result_test="$(test::render-template "$dir_tem_in/00-simple-html5.html")"
	result_model="$(cat "$dir_tem_out/00-simple-html5.html")"



	# DEBUG_TEMP resources
	#echo "»»» res:$result_test"; echo "-----"; echo "mod:$result_model"; exit # DEBUG_TEMP



	test_h2 "Routing"
	# ~~~~~~~~~~~~~~~~~~~~~~~~

	# T: Just the index and some other
	mkdir -p -- "$dir_tem"
	printf 'index\n' > "$dir_tem/index.html"
	printf 'other\n' > "$dir_tem/other.html"
	webera -tC \
		"template : route : index.html : /
	     template : route : other.html : /some-other-url/"
	assert "[[ -f $dir_out/index.html ]]"

	# T: check the contents are there
	assert "$(<$dir_out/index.html)"


	test_clean


	# T: Route to a file, and another
	# mkdir -p -- "$dir_tem"
	# cp -- "$dir_tem/XXX" "$dir_tem/mytemplate.html"
	# webera -tC \
	# 	"template : route : mytemplate.html : my-file-url.html"
	# assert "[[ -f $dir_out/my-file-url.html]]"
	# ls -l $dir_out/my-file-url.html
	# assert "$(cat -- $dir_out/my-file-url.html)" "$templ_simpl"

	test_clean

	# T:
	assert "[[ -f out/indsex.html ]]"



} #::suite()


#-------------------------------------------------------------------------------
# ::init
#
# > $1 : when equals "run-all-tests", common test data cleanup wont happen here
#
test::init() {

	# Change to the directory where this script is located
	if [[ "${BASH_SOURCE%/*}" != "${BASH_SOURCE[0]}" ]]; then
		cd -- "${BASH_SOURCE%/*}" || exit 1
	fi

	local Dir_tests; Dir_tests="$(pwd)"

	# shellcheck disable=SC1091
	source ./helper &>/dev/null

	# Run tests
	test_setup
	test::suite
	test_teardown

	test_summary "templates"

	# Only do the final cleanup when the script is run independently
	[[ $1 != RUN_ALL_TESTS ]] && test_final_cleanup

} # ::init()


# ::render-template
#
#   A wrapper for webera::render-template.
#
# > $1 : template file
#
# shellcheck disable=SC2034
test::render-template() {

	# global variables needed for the wrapped function and its childs
	local Opt_nesting_max=8
	local -r __Ws="[[:space:]]" # whitespace
	# local -r __Sed_trim_ws="s/^$__Ws*//;s/$__Ws*$//"
	# local -r __Sed_del_comments="/^$__Ws*#.*/d" # starting in #
	# local -r __Sed_del_empty_lines="/^$__Ws*$/d"
	# local -r __Sed_join_split_lines=':x; /\\$/ {N; s/\\\n//; tx}' # ending in \

	webera::render-template "$1"

} # ::render-template()


[[ "$0" == "${BASH_SOURCE[0]}" ]] && test::init "$@"
